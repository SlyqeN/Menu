#include <iostream>
#include <exception>
#include "Models/Client/Client.h"
#include "Models/Employee/Employee.h"
#include "menu/Auth/AuthManager.h"
#include "menu/CMenu.h"
#include "menu/MyVector.h"
#include "menu/MyException.h"
using namespace std;

int main() {
    try {
        MyVector<Client> clients;
        MyVector<Employee> employees;
        employees.push_back(Employee("admin", "admin123", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"));
        AuthManager auth(clients, 100, employees, 10);
        string currentUserLogin;
        CMenu mainMenu;
        mainMenu.addItem(CMenuItem("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞", [&]() {
            try {
                Client newClient;
                cin >> newClient;
                if (auth.registerClient(newClient.getLogin(), newClient.getPassword())) {
                    cout << "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" << endl;
                } else {
                    cout << "–û—à–∏–±–∫–∞: –õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤!" << endl;
                }
            } catch(const MyException& ex) {
                cout << ex.what() << endl;
                cin.clear(); cin.ignore(10000, '\n');
            } catch(const exception& ex) {
                cout << ex.what() << endl;
                cin.clear(); cin.ignore(10000, '\n');
            }
        }));
        mainMenu.addItem(CMenuItem("–í–æ–π—Ç–∏", [&]() {
            try {
                string login, password;
                cout << "–õ–æ–≥–∏–Ω: ";
                cin >> login;
                cout << "–ü–∞—Ä–æ–ª—å: ";
                cin >> password;
                int role = auth.authenticate(login, password);
                currentUserLogin = login;
                if (role == 0) {
                    cout << "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!" << endl;
                    return;
                }
                CMenu userMenu;
                if (role == 1) {
                    userMenu.addItem(CMenuItem("–û—Ñ–æ—Ä–º–∏—Ç—å –≤–∫–ª–∞–¥", [&]() {
                        try {
                            Deposit deposit;
                            cin >> deposit;
                            for (int i = 0; i < clients.getSize(); ++i) {
                                if (clients[i].getLogin() == currentUserLogin) {
                                    if (clients[i].addDeposit(deposit)) {
                                        cout << "–í–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!" << endl;
                                    } else {
                                        cout << "–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–∫–ª–∞–¥–æ–≤!" << endl;
                                    }
                                    break;
                                }
                            }
                        } catch(const MyException& ex) {
                            cout << ex.what() << endl;
                            cin.clear(); cin.ignore(10000, '\n');
                        } catch(const exception& ex) {
                            cout << ex.what() << endl;
                            cin.clear(); cin.ignore(10000, '\n');
                        }
                    }));
                    userMenu.addItem(CMenuItem("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", [&]() {
                        for (int i = 0; i < clients.getSize(); ++i) {
                            if (clients[i].getLogin() == currentUserLogin) {
                                clients[i].displayInfo();
                                const Deposit* deposits = clients[i].getDeposits();
                                for (int j = 0; j < clients[i].getDepositCount(); ++j) {
                                    cout << "üîπ " << deposits[j] << endl;
                                }
                                break;
                            }
                        }
                    }));
                } else if (role == 2) {
                    userMenu.addItem(CMenuItem("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", [&]() {
                        if (clients.getSize() == 0) {
                            cout << endl;
                            cout << "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç." << endl;
                            return;
                        }
                        cout << endl;
                        cout << "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (" << clients.getSize() << "):" << endl;
                        for (int i = 0; i < clients.getSize(); ++i) {
                            cout << i + 1 << ". " << clients[i].getLogin() << endl;
                        }
                    }));
                    userMenu.addItem(CMenuItem("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", [&]() {
                        string targetLogin;
                        cout << "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞: ";
                        cin >> targetLogin;
                        if (auth.removeClient(targetLogin)) {
                            cout << "–ö–ª–∏–µ–Ω—Ç " << targetLogin << " —É–¥–∞–ª—ë–Ω!" << endl;
                        } else {
                            cout << endl;
                            cout << "–û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!" << endl;
                        }
                    }));
                    userMenu.addItem(CMenuItem("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤", [&]() {
                        auth.sortClients();
                        cout << "–ö–ª–∏–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ª–æ–≥–∏–Ω—É." << endl;
                        for (int i = 0; i < clients.getSize(); ++i) {
                            cout << "  " << i + 1 << ". " << clients[i].getLogin() << endl;
                        }
                    }));
                    userMenu.addItem(CMenuItem("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∫–ª–∞–¥–æ–≤", [&]() {
                        try {
                            if (clients.getSize() == 0) {
                                cout << endl;
                                cout << "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞." << endl;
                                return;
                            }
                            cout << "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ (1-" << clients.getSize() << "): ";
                            int choice;
                            cin >> choice;
                            if (cin.fail()) throw MyException("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ!");
                            if (choice < 1 || choice > clients.getSize()) throw MyException("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                            employees[0].viewClientDeposits(clients[choice - 1]);
                        } catch(const MyException& ex) {
                            cout << ex.what() << endl;
                            cin.clear(); cin.ignore(10000, '\n');
                        } catch(const exception& ex) {
                            cout << ex.what() << endl;
                            cin.clear(); cin.ignore(10000, '\n');
                        }
                    }));
                }
                userMenu.run();
            } catch(const MyException& ex) {
                cout << ex.what() << endl;
                cin.clear(); cin.ignore(10000, '\n');
            } catch(const exception& ex) {
                cout << ex.what() << endl;
                cin.clear(); cin.ignore(10000, '\n');
            }
        }));
        mainMenu.addItem(CMenuItem("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞ (–≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω)", []() {
            try {
                MyVector<string> vec;
                cout << endl << "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –≤–µ–∫—Ç–æ—Ä" << endl;
                vec.push_back("–û–¥–∏–Ω");
                vec.push_back("–î–≤–∞");
                vec.push_back("–¢—Ä–∏");
                cout << "–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " << vec.getSize() << endl;
                cout << endl << "–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É:" << endl;
                for (auto it:vec) {
                    cout << "  * " << it << endl;
                }
                cout << endl << "–£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 1" << endl;
                vec.erase(1);
                cout << "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:" << endl;
                for (auto it:vec) {
                    cout << "  * " << it << endl;
                }
                cout << endl << "–î–æ–±–∞–≤–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω–æ–≤—å" << endl;
                vec.push_back("–ß–µ—Ç—ã—Ä–µ");
                vec.push_back("–ü—è—Ç—å");
                cout << "–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:" << endl;
                for (auto it:vec) {
                    cout << "  * " << it << endl;
                }
                cout << "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: " << vec.getSize() << endl;
            } catch(const MyException& ex) {
                cout << ex.what() << endl;
            } catch(const exception& ex) {
                cout << ex.what() << endl;
            }
        }));
        mainMenu.run();
    } catch(const MyException& ex) {
        cout << ex.what() << endl;
    } catch(const exception& ex) {
        cout << ex.what() << endl;
    }
}
